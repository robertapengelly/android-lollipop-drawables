<?xml version="1.0" encoding="utf-8" ?>
<resources>

    <!-- The primary branding color for the app. By default, this is the color applied to the
         action bar background. -->
    <attr format="color" name="colorPrimary" />
    
    <!-- Dark variant of the primary branding color. By default, this is the color applied to
         the status bar (via statusBarColor) and navigation bar (via navigationBarColor). -->
    <attr format="color" name="colorPrimaryDark" />
    
    <!-- Bright complement to the primary branding color. By default, this is the color applied
         to framework controls (via colorControlActivated). -->
    <attr format="color" name="colorAccent" />
    
<<<<<<< HEAD
    <!-- The color applied to framework controls in their normal state. -->
    <attr format="color" name="colorControlNormal" />
=======
    <!-- The color applied to framework buttons in their normal state. -->
    <attr format="color" name="colorButtonNormal" />
>>>>>>> f6653c4ec5ec2d3edb3df767edf01ab94bbdeb96
    
    <!-- The color applied to framework controls in their activated (ex. checked) state. -->
    <attr format="color" name="colorControlActivated" />
    
    <!-- The color applied to framework control highlights (ex. ripples, list selectors). -->
    <attr format="color" name="colorControlHighlight" />
    
    <!-- The color applied to framework buttons in their normal state. -->
    <attr format="color" name="colorButtonNormal" />
    
    <!-- The color applied to the edge effect on scrolling containers. -->
    <attr format="color" name="colorEdgeEffect" />
    
    <declare-styleable name="AnimatedRotateDrawable">
        <attr name="android:drawable" />
        <attr format="integer" name="framesCount" />
        <attr format="integer" name="frameDuration" />
        <attr name="android:pivotX" />
        <attr name="android:pivotY" />
        <attr name="android:visible" />
    </declare-styleable>
    
    <!-- Drawable used to render several states with animated transitions. Each state
         is represented by a child drawable with an optional keyframe ID. -->
    <declare-styleable name="AnimatedStateListDrawable">
    
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="android:autoMirrored"/>
        
        <!-- If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. -->
        <attr name="android:constantSize" />
        
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). -->
        <attr name="android:dither" />
        
        <!-- Amount of time (in milliseconds) to fade in a new state drawable. -->
        <attr name="android:enterFadeDuration" />
        
        <!-- Amount of time (in milliseconds) to fade out an old state drawable. -->
        <attr name="android:exitFadeDuration" />
        
        <!-- If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. -->
        <attr name="android:variablePadding" />
        
        <!-- Indicates whether the drawable should be initially visible. -->
        <attr name="android:visible" />
    
    </declare-styleable>
    
    <!-- Transition used to animate between states with keyframe IDs. -->
    <declare-styleable name="AnimatedStateListDrawableTransition">
    
        <!-- Keyframe identifier for the starting state. -->
        <attr format="reference" name="fromId" />
        
        <!-- Whether this transition is reversible. -->
        <attr format="boolean" name="reversible" />

        <!-- Keyframe identifier for the ending state. -->
        <attr format="reference" name="toId" />
    
    </declare-styleable>
    
    <!-- Drawable used to render several animated frames. -->
    <declare-styleable name="AnimationDrawable">
    
        <!-- If true, the animation will only run a single time and then
             stop.  If false (the default), it will continually run,
             restarting at the first frame after the last has finished. -->
        <attr name="android:oneshot" />
        
        <attr name="android:variablePadding" />
        
        <attr name="android:visible" />
    
    </declare-styleable>
    
    <!-- Represents a single frame inside an AnimationDrawable. -->
    <declare-styleable name="AnimationDrawableItem">
    
        <!-- Reference to a drawable resource to use for the frame.  If not
             given, the drawable must be defined by the first child tag. -->
        <attr name="android:drawable" />
        
        <!-- Amount of time (in milliseconds) to display this frame. -->
        <attr name="android:duration" />
    
    </declare-styleable>
    
    <!-- Drawable used to draw bitmaps. -->
    <declare-styleable name="BitmapDrawable">
    
        <!-- Specifies the alpha multiplier to apply to the base drawable. -->
        <attr name="android:alpha" />
        
        <!-- Enables or disables antialiasing. Antialiasing can be used to smooth the
             edges of a bitmap when rotated. Default value is false. -->
        <attr name="android:antialias" />
        
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="android:autoMirrored" />
        
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). Default value is true. -->
        <attr name="android:dither" />
        
        <!-- Enables or disables bitmap filtering. Filtering is used when the bitmap is
             shrunk or stretched to smooth its apperance. Default value is true. -->
        <attr name="android:filter" />
        
        <!-- Defines the gravity for the bitmap. The gravity indicates where to position
             the drawable in its container if the bitmap is smaller than the container. -->
        <attr name="android:gravity" />
        
        <!-- Enables or disables the mipmap hint. See
            {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
            Default value is false. -->
        <attr name="android:mipMap" />
        
        <!-- Identifier of the bitmap file. This attribute is mandatory. -->
        <attr name="android:src" />
        
        <!-- Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". -->
        <attr name="android:tileMode" />
        
        <!-- Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". -->
        <attr name="android:tileModeX" />
        
        <!-- Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
             Gravity is ignored when the tile mode is enabled. Default value is "disabled". -->
        <attr name="android:tileModeY" />
        
        <!-- If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. -->
        <attr name="android:tint" />
        
        <!-- When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. -->
        <attr name="android:tintMode" />
    
    </declare-styleable>
    
    <!-- Describes the corners for the rectangle shape of a GradientDrawable.
         This can be used to render rounded corners. -->
    <declare-styleable name="DrawableCorners">
    
        <!-- Radius of the bottom left corner. -->
        <attr name="android:bottomLeftRadius" />
        
        <!-- Radius of the bottom right corner. -->
        <attr name="android:bottomRightRadius" />
        
        <!-- Defines the radius of the four corners. -->
        <attr name="android:radius" />
        
        <!-- Radius of the top left corner. -->
        <attr name="android:topLeftRadius" />
        
        <!-- Radius of the top right corner. -->
        <attr name="android:topRightRadius" />
    
    </declare-styleable>
    
    <!-- Drawable used to render a geometric shape, with a gradient or a solid color. -->
    <declare-styleable name="GradientDrawable">
    
        <!-- Enables or disables dithering. -->
        <attr name="android:dither" />
        
        <!-- Inner radius of the ring. When defined, innerRadiusRatio is ignored. -->
        <attr name="android:innerRadius" />
        
        <!-- Inner radius of the ring expressed as a ratio of the ring's width. For instance,
             if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
             This value is ignored if innerRadius is defined. Default value is 9. -->
        <attr name="android:innerRadiusRatio" />
        
        <!-- Indicates what shape to fill with a gradient. -->
        <attr name="android:shape" />
        
        <!-- Thickness of the ring. When defined, thicknessRatio is ignored. -->
        <attr name="android:thickness" />
        
        <!-- Thickness of the ring expressed as a ratio of the ring's width. For instance,
             if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
             This value is ignored if innerRadius is defined. Default value is 3. -->
        <attr name="android:thicknessRatio" />
        
        <!-- Indicates whether the drawable's level affects the way the gradient is drawn. -->
        <attr name="android:useLevel" />
        
        <!-- Indicates whether the drawable should intially be visible. -->
        <attr name="android:visible" />
    
    </declare-styleable>
    
    <!-- Used to describe the gradient used to fill the shape of a GradientDrawable. -->
    <declare-styleable name="GradientDrawableGradient">
    
        <!-- Angle of the gradient. -->
        <attr name="android:angle" />
        
        <!-- Optional center color. For linear gradients, use centerX or centerY
             to place the center color. -->
        <attr name="android:centerColor" />
        
        <!-- X coordinate of the origin of the gradient within the shape. -->
        <attr name="android:centerX" />
        
        <!-- Y coordinate of the origin of the gradient within the shape. -->
        <attr name="android:centerY" />
        
        <!-- End color of the gradient. -->
        <attr name="android:endColor" />
        
        <!-- Radius of the gradient, used only with radial gradient. -->
        <attr name="android:gradientRadius" />
        
        <!-- Start color of the gradient. -->
        <attr name="android:startColor" />
        
        <!-- Type of gradient. The default type is linear. -->
        <attr name="android:type" />
        
        <attr name="android:useLevel" />
    
    </declare-styleable>
    
    <!-- Used to specify the optional padding of a GradientDrawable. -->
    <declare-styleable name="GradientDrawablePadding">
    
        <!-- Amount of bottom padding inside the gradient shape. -->
        <attr name="android:bottom" />
        
        <!-- Amount of left padding inside the gradient shape. -->
        <attr name="android:left" />
        
        <!-- Amount of right padding inside the gradient shape. -->
        <attr name="android:right" />
        
        <!-- Amount of top padding inside the gradient shape. -->
        <attr name="android:top" />
    
    </declare-styleable>
    
    <!-- Used to specify the size of the shape for GradientDrawable. -->
    <declare-styleable name="GradientDrawableSize">
    
        <!-- Height of the gradient shape. -->
        <attr name="android:height" />
        
        <!-- Width of the gradient shape. -->
        <attr name="android:width" />
    
    </declare-styleable>
    
    <!-- Used to fill the shape of GradientDrawable with a solid color. -->
    <declare-styleable name="GradientDrawableSolid">
    
        <!-- Solid color for the gradient shape. -->
        <attr name="android:color" />
    
    </declare-styleable>
    
    <!-- Used to describe the optional stroke of a GradientDrawable. -->
    <declare-styleable name="GradientDrawableStroke">
    
        <!-- Color of the gradient shape's stroke. -->
        <attr name="android:color" />
        
        <!-- Gap between dashes in the stroke. -->
        <attr name="android:dashGap" />
        
        <!-- Length of a dash in the stroke. -->
        <attr name="android:dashWidth" />
        
        <!-- Width of the gradient shape's stroke. -->
        <attr name="android:width" />
    
    </declare-styleable>
    
    <declare-styleable name="InsetDrawable">
        <attr name="android:drawable" />
        <attr name="android:inset" />
        <attr name="android:insetBottom" />
        <attr name="android:insetLeft" />
        <attr name="android:insetRight" />
        <attr name="android:insetTop" />
        <attr name="android:visible" />
    </declare-styleable>
    
    <!-- Drawable used to render several drawables stacked on top of each other.
         Each child drawable can be controlled individually. -->
    <declare-styleable name="LayerDrawable">
    
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="android:autoMirrored"/>
        
        <!-- Indicates the opacity of the layer. This can be useful to allow the
              system to enable drawing optimizations. The default value is
              translucent. -->
        <attr name="android:opacity"/>
        
        <!-- Indicates how layer padding should affect the bounds of subsequent layers.
             The default padding mode value is nest. -->
        <attr name="android:paddingMode"/>
        
        <!-- Indicates whether the drawable should be initially visible. -->
        <attr name="android:visible"/>
    
    </declare-styleable>
    
    <!-- Describes an item (or child) of a LayerDrawable. -->
    <declare-styleable name="LayerDrawableItem">
    
        <!-- Bottom coordinate of the layer. -->
        <attr name="android:bottom"/>
        
        <!-- Drawable used to render the layer. -->
        <attr name="android:drawable"/>
        
        <!-- Identifier of the layer. This can be used to retrieve the layer
             from a drawable container. -->
        <attr name="android:id"/>
        
        <!-- Left coordinate of the layer. -->
        <attr name="android:left"/>
        
        <!-- Right coordinate of the layer. -->
        <attr name="android:right"/>
        
        <!-- Top coordinate of the layer. -->
        <attr name="android:top"/>
    
    </declare-styleable>
    
    <!-- Drawable used to draw 9-patches. -->
    <declare-styleable name="NinePatchDrawable">
    
        <!-- Specifies the alpha multiplier to apply to the base drawable. -->
        <attr name="android:alpha" />
        
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="android:autoMirrored" />
        
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). -->
        <attr name="android:dither" />
        
        <!-- Identifier of the bitmap file. This attribute is mandatory. -->
        <attr name="android:src" />
        
        <!-- If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. -->
        <attr name="android:tint" />
        
        <!-- When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. -->
        <attr name="android:tintMode" />
    
    </declare-styleable>
    
    <!-- Drawable used to show animated touch feedback. -->
    <declare-styleable name="RippleDrawable">
    
        <!-- The color to use for ripple effects. This attribute is required. -->
        <attr name="android:color"/>
    
    </declare-styleable>
    
    <!-- Drawable used to draw shapes. -->
    <declare-styleable name="ShapeDrawable">
    
        <!-- Defines the color of the shape. -->
        <attr name="android:color" />
        
        <!-- Enables or disables dithering. -->
        <attr name="android:dither" />
        
        <!-- Defines the height of the shape. -->
        <attr name="android:height" />
        
        <!-- If set, specifies the color to apply to the drawable as a tint. By default,
             no tint is applied. May be a color state list. -->
        <attr name="android:tint" />
        
        <!-- When a tint color is set, specifies its Porter-Duff blending mode. The
             default value is src_in, which treats the drawable as an alpha mask. -->
        <attr name="android:tintMode" />
        
        <!-- Defines the width of the shape. -->
        <attr name="android:width" />
    
    </declare-styleable>
    
    <!-- Defines the padding of a ShapeDrawable. -->
    <declare-styleable name="ShapeDrawablePadding">
    
        <!-- Bottom padding. -->
        <attr name="android:bottom" />
        
        <!-- Left padding. -->
        <attr name="android:left" />
        
        <!-- Right padding. -->
        <attr name="android:right" />
        
        <!-- Top padding. -->
        <attr name="android:top" />
    
    </declare-styleable>
    
    <!-- Drawable used to render several states. Each state is represented by
         a child drawable. -->
    <declare-styleable name="StateListDrawable">
    
        <!-- Indicates if the drawable needs to be mirrored when its layout direction is
             RTL (right-to-left). -->
        <attr name="android:autoMirrored"/>
        
        <!-- If true, the drawable's reported internal size will remain
             constant as the state changes; the size is the maximum of all
             of the states.  If false, the size will vary based on the
             current state. -->
        <attr name="android:constantSize" />
        
        <!-- Enables or disables dithering of the bitmap if the bitmap does not have the
             same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
             an RGB 565 screen). -->
        <attr name="android:dither" />
        
        <!-- Amount of time (in milliseconds) to fade in a new state drawable. -->
        <attr name="android:enterFadeDuration" />
        
        <!-- Amount of time (in milliseconds) to fade out an old state drawable. -->
        <attr name="android:exitFadeDuration" />
        
        <!-- If true, allows the drawable's padding to change based on the
             current state that is selected.  If false, the padding will
             stay the same (based on the maximum padding of all the states).
             Enabling this feature requires that the owner of the drawable
             deal with performing layout when the state changes, which is
             often not supported. -->
        <attr name="android:variablePadding" />
        
        <!-- Indicates whether the drawable should be initially visible. -->
        <attr name="android:visible" />
    
    </declare-styleable>

</resources>
